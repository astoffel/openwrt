From 297c54977ede8b0034d82dc1c87da7e5034bde11 Mon Sep 17 00:00:00 2001
From: Daniel Lezcano <daniel.lezcano@free.fr>
Date: Mon, 14 Feb 2011 16:35:04 +0100
Subject: [PATCH] Notify container-init parent a 'reboot' occured

Signed-off-by: Daniel Lezcano <daniel.lezcano@free.fr>
---
 include/asm-generic/siginfo.h |    3 +-
 include/linux/sched.h         |    1 +
 kernel/signal.c               |   40 +++++++++++++++++++++++++++
 kernel/sys.c                  |   61 ++++++++++++++++++++++++++++-------------
 4 files changed, 85 insertions(+), 20 deletions(-)

--- a/include/asm-generic/siginfo.h
+++ b/include/asm-generic/siginfo.h
@@ -218,7 +218,8 @@ typedef struct siginfo {
 #define CLD_TRAPPED	(__SI_CHLD|4)	/* traced child has trapped */
 #define CLD_STOPPED	(__SI_CHLD|5)	/* child has stopped */
 #define CLD_CONTINUED	(__SI_CHLD|6)	/* stopped child has continued */
-#define NSIGCHLD	6
+#define CLD_REBOOTED    (__SI_CHLD|7)   /* process was killed by a reboot */
+#define NSIGCHLD	7
 
 /*
  * SIGPOLL si_codes
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -2201,6 +2201,7 @@ extern int kill_pgrp(struct pid *pid, in
 extern int kill_pid(struct pid *pid, int sig, int priv);
 extern int kill_proc_info(int, struct siginfo *, pid_t);
 extern __must_check bool do_notify_parent(struct task_struct *, int);
+extern void do_notify_parent_cldreboot(struct task_struct *, int, char *);
 extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
 extern void force_sig(int, struct task_struct *);
 extern int send_sig(int, struct task_struct *, int);
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -416,6 +416,13 @@ void kernel_power_off(void)
 }
 EXPORT_SYMBOL_GPL(kernel_power_off);
 
+static void pid_namespace_reboot(struct pid_namespace *pid_ns,
+				int cmd, char *buffer)
+{
+	struct task_struct *tsk = pid_ns->child_reaper;
+	do_notify_parent_cldreboot(tsk, cmd, buffer);
+}
+
 static DEFINE_MUTEX(reboot_mutex);
 
 /*
@@ -429,13 +436,10 @@ static DEFINE_MUTEX(reboot_mutex);
 SYSCALL_DEFINE4(reboot, int, magic1, int, magic2, unsigned int, cmd,
 		void __user *, arg)
 {
-	char buffer[256];
+	struct pid_namespace *pid_ns = current->nsproxy->pid_ns;
+	char buffer[256] = { 0 };
 	int ret = 0;
 
-	/* We only trust the superuser with rebooting the system. */
-	if (!capable(CAP_SYS_BOOT))
-		return -EPERM;
-
 	/* For safety, we require "magic" arguments. */
 	if (magic1 != LINUX_REBOOT_MAGIC1 ||
 	    (magic2 != LINUX_REBOOT_MAGIC2 &&
@@ -450,12 +454,45 @@ SYSCALL_DEFINE4(reboot, int, magic1, int
 	if ((cmd == LINUX_REBOOT_CMD_POWER_OFF) && !pm_power_off)
 		cmd = LINUX_REBOOT_CMD_HALT;
 
+	/* check the cmd parameter */
+	if (cmd != LINUX_REBOOT_CMD_RESTART &&
+#ifdef CONFIG_KEXEC
+	    cmd != LINUX_REBOOT_CMD_KEXEC &&
+#endif
+#ifdef CONFIG_HIBERNATION
+	    cmd != LINUX_REBOOT_CMD_SW_SUSPEND &&
+#endif
+	    cmd != LINUX_REBOOT_CMD_CAD_ON &&
+	    cmd != LINUX_REBOOT_CMD_CAD_OFF &&
+	    cmd != LINUX_REBOOT_CMD_HALT &&
+	    cmd != LINUX_REBOOT_CMD_POWER_OFF &&
+	    cmd != LINUX_REBOOT_CMD_RESTART2)
+		return -EINVAL;
+
+	if (cmd == LINUX_REBOOT_CMD_RESTART2)
+		if (strncpy_from_user(&buffer[0], arg, sizeof(buffer) - 1) < 0)
+			return -EFAULT;
+
+	/* If we are not in the initial pid namespace, we send a signal
+	 * to the parent of this init pid namespace, notifying a shutdown
+	 * occured */
+	if (pid_ns != &init_pid_ns)
+		pid_namespace_reboot(pid_ns, cmd, buffer);
+
+	/* We only trust the superuser with rebooting the system. */
+	if (!capable(CAP_SYS_BOOT))
+		return -EPERM;
+
 	mutex_lock(&reboot_mutex);
 	switch (cmd) {
 	case LINUX_REBOOT_CMD_RESTART:
 		kernel_restart(NULL);
 		break;
 
+	case LINUX_REBOOT_CMD_RESTART2:
+		kernel_restart(buffer);
+		break;
+
 	case LINUX_REBOOT_CMD_CAD_ON:
 		C_A_D = 1;
 		break;
@@ -474,16 +511,6 @@ SYSCALL_DEFINE4(reboot, int, magic1, int
 		do_exit(0);
 		break;
 
-	case LINUX_REBOOT_CMD_RESTART2:
-		if (strncpy_from_user(&buffer[0], arg, sizeof(buffer) - 1) < 0) {
-			ret = -EFAULT;
-			break;
-		}
-		buffer[sizeof(buffer) - 1] = '\0';
-
-		kernel_restart(buffer);
-		break;
-
 #ifdef CONFIG_KEXEC
 	case LINUX_REBOOT_CMD_KEXEC:
 		ret = kernel_kexec();
@@ -495,10 +522,6 @@ SYSCALL_DEFINE4(reboot, int, magic1, int
 		ret = hibernate();
 		break;
 #endif
-
-	default:
-		ret = -EINVAL;
-		break;
 	}
 	mutex_unlock(&reboot_mutex);
 	return ret;
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -1707,6 +1707,46 @@ bool do_notify_parent(struct task_struct
 	return autoreap;
 }
 
+void do_notify_parent_cldreboot(struct task_struct *tsk, int why, char *buffer)
+{
+   struct siginfo info = { };
+   struct task_struct *parent;
+   struct sighand_struct *sighand;
+   unsigned long flags;
+
+   if (tsk->ptrace)
+       parent = tsk->parent;
+   else {
+       tsk = tsk->group_leader;
+       parent = tsk->real_parent;
+   }
+
+   info.si_signo = SIGCHLD;
+   info.si_errno = 0;
+   info.si_status = why;
+
+   rcu_read_lock();
+   info.si_pid = task_pid_nr_ns(tsk, parent->nsproxy->pid_ns);
+   info.si_uid = __task_cred(tsk)->uid;
+   rcu_read_unlock();
+
+   info.si_utime = cputime_to_clock_t(tsk->utime);
+   info.si_stime = cputime_to_clock_t(tsk->stime);
+
+   info.si_code = CLD_REBOOTED;
+
+   sighand = parent->sighand;
+   spin_lock_irqsave(&sighand->siglock, flags);
+   if (sighand->action[SIGCHLD-1].sa.sa_handler != SIG_IGN &&
+       sighand->action[SIGCHLD-1].sa.sa_flags & SA_CLDREBOOT)
+       __group_send_sig_info(SIGCHLD, &info, parent);
+   /*
+    * Even if SIGCHLD is not generated, we must wake up wait4 calls.
+    */
+   __wake_up_parent(tsk, parent);
+   spin_unlock_irqrestore(&sighand->siglock, flags);
+}
+
 /**
  * do_notify_parent_cldstop - notify parent of stopped/continued state change
  * @tsk: task reporting the state change
